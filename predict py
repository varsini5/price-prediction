from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# === RANDOM FOREST EVALUATION ===
rf_pred = rf_model.predict(X_test)
rf_mae = mean_absolute_error(y_test, rf_pred)
rf_rmse = np.sqrt(mean_squared_error(y_test, rf_pred))
rf_r2 = r2_score(y_test, rf_pred)

# === GRADIENT BOOSTING EVALUATION ===
gb_pred = gb_model.predict(X_test)
gb_mae = mean_absolute_error(y_test, gb_pred)
gb_rmse = np.sqrt(mean_squared_error(y_test, gb_pred))
gb_r2 = r2_score(y_test, gb_pred)

# === SVR EVALUATION (scaled data) ===
svr_pred = svr_model.predict(X_test_scaled)
svr_mae = mean_absolute_error(y_test, svr_pred)
svr_rmse = np.sqrt(mean_squared_error(y_test, svr_pred))
svr_r2 = r2_score(y_test, svr_pred)

# === PRINT RESULTS ===
print("\nüîç Model Evaluation Results:\n")

print("üî∏ Random Forest")
print(f"MAE: {rf_mae:.2f}, RMSE: {rf_rmse:.2f}, R¬≤: {rf_r2:.2f}")

print("\nüî∏ Gradient Boosting")
print(f"MAE: {gb_mae:.2f}, RMSE: {gb_rmse:.2f}, R¬≤: {gb_r2:.2f}")

print("\nüî∏ Support Vector Regressor (SVR)")
print(f"MAE: {svr_mae:.2f}, RMSE: {svr_rmse:.2f}, R¬≤: {svr_r2:.2f}")
